/*
 * generated by Xtext 2.30.0
 */
package sdu.abba.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import sdu.abba.environmentalMonitoring.Model
import sdu.abba.environmentalMonitoring.EnvironmentalMonitoringPackage
import sdu.abba.validation.EnvironmentalMonitoringValidator

@ExtendWith(InjectionExtension)
@InjectWith(EnvironmentalMonitoringInjectorProvider)
class ValidationTest {
	@Inject ParseHelper<Model> parseHelper
	@Inject extension ValidationTestHelper
		
	@Test
	def void noDuplicateMachineNames() {
		val result = parseHelper.parse('''
			machine MachineA
			machine MachineA
		''')
		Assertions.assertNotNull(result)
		
		result.assertError(EnvironmentalMonitoringPackage.eINSTANCE.model, EnvironmentalMonitoringValidator.DUPLICATE_MACHINE_NAMES)
		Assertions.assertTrue(result.eResource.validate.size > 0 )	
	}
	
	@Test
	def void noDuplicateSensorNamesInsideMachine() {
		val result1 = parseHelper.parse('''
			machine MachineA
				sensor SensorA
				sensor SensorA
		''')
		Assertions.assertNotNull(result1)
		Assertions.assertTrue(result1.eResource.validate.size > 0 )	
		
		val result2 = parseHelper.parse('''
			machine MachineA
				sensor SensorA
				
			machine MachineB
				sensor SensorA
		''')
		Assertions.assertNotNull(result2)
		Assertions.assertTrue(result2.eResource.validate.size == 0 )	
	}
	
	@Test
	def void noDuplicateSamplingRateInsideSensor() {
		
		val result = parseHelper.parse('''
			machine MachineA
				sensor SensorA
					sampling rate 	= 100 / s
					sampling rate 	= 200 / s
		''')
		Assertions.assertNotNull(result)
		Assertions.assertTrue(result.eResource.validate.size > 0, 	"Should show an error when there is a double sampling rate")
	}
	
	@Test
	def void noDuplicateBatchSizeInsideSensor() {

		val result = parseHelper.parse('''
			machine MachineA
				sensor SensorA
					batch size 	= 100
					batch size 	= 200
		''')
		Assertions.assertNotNull(result)
		Assertions.assertTrue(result.eResource.validate.size > 0, 	"Should show an error when there is a double batch size")
	}
	
}
